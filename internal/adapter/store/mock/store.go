// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/k1nky/gophkeeper/internal/entity/user"
	vault "github.com/k1nky/gophkeeper/internal/entity/vault"
)

// MockObjectStore is a mock of ObjectStore interface.
type MockObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMockRecorder
}

// MockObjectStoreMockRecorder is the mock recorder for MockObjectStore.
type MockObjectStoreMockRecorder struct {
	mock *MockObjectStore
}

// NewMockObjectStore creates a new mock instance.
func NewMockObjectStore(ctrl *gomock.Controller) *MockObjectStore {
	mock := &MockObjectStore{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStore) EXPECT() *MockObjectStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockObjectStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockObjectStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockObjectStore)(nil).Close))
}

// Delete mocks base method.
func (m *MockObjectStore) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockObjectStoreMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockObjectStore)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockObjectStore) Get(ctx context.Context, key string) (*vault.DataReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*vault.DataReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockObjectStoreMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockObjectStore)(nil).Get), ctx, key)
}

// Open mocks base method.
func (m *MockObjectStore) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockObjectStoreMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockObjectStore)(nil).Open), ctx)
}

// Put mocks base method.
func (m *MockObjectStore) Put(ctx context.Context, key string, obj *vault.DataReader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, key, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockObjectStoreMockRecorder) Put(ctx, key, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockObjectStore)(nil).Put), ctx, key, obj)
}

// MockMetaStore is a mock of MetaStore interface.
type MockMetaStore struct {
	ctrl     *gomock.Controller
	recorder *MockMetaStoreMockRecorder
}

// MockMetaStoreMockRecorder is the mock recorder for MockMetaStore.
type MockMetaStoreMockRecorder struct {
	mock *MockMetaStore
}

// NewMockMetaStore creates a new mock instance.
func NewMockMetaStore(ctrl *gomock.Controller) *MockMetaStore {
	mock := &MockMetaStore{ctrl: ctrl}
	mock.recorder = &MockMetaStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaStore) EXPECT() *MockMetaStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetaStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetaStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetaStore)(nil).Close))
}

// GetMeta mocks base method.
func (m *MockMetaStore) GetMeta(ctx context.Context, metaID vault.MetaID, userID user.ID) (*vault.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", ctx, metaID, userID)
	ret0, _ := ret[0].(*vault.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockMetaStoreMockRecorder) GetMeta(ctx, metaID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockMetaStore)(nil).GetMeta), ctx, metaID, userID)
}

// GetUserByLogin mocks base method.
func (m *MockMetaStore) GetUserByLogin(ctx context.Context, login string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockMetaStoreMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockMetaStore)(nil).GetUserByLogin), ctx, login)
}

// ListMetaByUser mocks base method.
func (m *MockMetaStore) ListMetaByUser(ctx context.Context, userID user.ID) (vault.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetaByUser", ctx, userID)
	ret0, _ := ret[0].(vault.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetaByUser indicates an expected call of ListMetaByUser.
func (mr *MockMetaStoreMockRecorder) ListMetaByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetaByUser", reflect.TypeOf((*MockMetaStore)(nil).ListMetaByUser), ctx, userID)
}

// NewMeta mocks base method.
func (m_2 *MockMetaStore) NewMeta(ctx context.Context, m vault.Meta) (*vault.Meta, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "NewMeta", ctx, m)
	ret0, _ := ret[0].(*vault.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMeta indicates an expected call of NewMeta.
func (mr *MockMetaStoreMockRecorder) NewMeta(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMeta", reflect.TypeOf((*MockMetaStore)(nil).NewMeta), ctx, m)
}

// NewUser mocks base method.
func (m *MockMetaStore) NewUser(ctx context.Context, u user.User) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", ctx, u)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockMetaStoreMockRecorder) NewUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockMetaStore)(nil).NewUser), ctx, u)
}

// Open mocks base method.
func (m *MockMetaStore) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockMetaStoreMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockMetaStore)(nil).Open), ctx)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// GetSecretData mocks base method.
func (m *MockStore) GetSecretData(ctx context.Context, metaID vault.MetaID) (*vault.DataReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretData", ctx, metaID)
	ret0, _ := ret[0].(*vault.DataReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretData indicates an expected call of GetSecretData.
func (mr *MockStoreMockRecorder) GetSecretData(ctx, metaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretData", reflect.TypeOf((*MockStore)(nil).GetSecretData), ctx, metaID)
}

// GetSecretMeta mocks base method.
func (m *MockStore) GetSecretMeta(ctx context.Context, metaID vault.MetaID, userID user.ID) (*vault.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretMeta", ctx, metaID, userID)
	ret0, _ := ret[0].(*vault.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretMeta indicates an expected call of GetSecretMeta.
func (mr *MockStoreMockRecorder) GetSecretMeta(ctx, metaID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretMeta", reflect.TypeOf((*MockStore)(nil).GetSecretMeta), ctx, metaID, userID)
}

// GetUserByLogin mocks base method.
func (m *MockStore) GetUserByLogin(ctx context.Context, login string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockStoreMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockStore)(nil).GetUserByLogin), ctx, login)
}

// ListSecretsByUser mocks base method.
func (m *MockStore) ListSecretsByUser(ctx context.Context, userID user.ID) (vault.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretsByUser", ctx, userID)
	ret0, _ := ret[0].(vault.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretsByUser indicates an expected call of ListSecretsByUser.
func (mr *MockStoreMockRecorder) ListSecretsByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretsByUser", reflect.TypeOf((*MockStore)(nil).ListSecretsByUser), ctx, userID)
}

// NewUser mocks base method.
func (m *MockStore) NewUser(ctx context.Context, u user.User) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", ctx, u)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockStoreMockRecorder) NewUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockStore)(nil).NewUser), ctx, u)
}

// Open mocks base method.
func (m *MockStore) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockStoreMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStore)(nil).Open), ctx)
}

// PutSecret mocks base method.
func (m *MockStore) PutSecret(ctx context.Context, meta vault.Meta, data *vault.DataReader) (*vault.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSecret", ctx, meta, data)
	ret0, _ := ret[0].(*vault.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSecret indicates an expected call of PutSecret.
func (mr *MockStoreMockRecorder) PutSecret(ctx, meta, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSecret", reflect.TypeOf((*MockStore)(nil).PutSecret), ctx, meta, data)
}
