// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: internal/protocol/proto/keeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Keeper_GetSecretMeta_FullMethodName = "/internal.protocol.proto.Keeper/GetSecretMeta"
	Keeper_GetSecretData_FullMethodName = "/internal.protocol.proto.Keeper/GetSecretData"
	Keeper_PutSecret_FullMethodName     = "/internal.protocol.proto.Keeper/PutSecret"
	Keeper_ListSecrets_FullMethodName   = "/internal.protocol.proto.Keeper/ListSecrets"
)

// KeeperClient is the client API for Keeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperClient interface {
	GetSecretMeta(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*Meta, error)
	GetSecretData(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (Keeper_GetSecretDataClient, error)
	PutSecret(ctx context.Context, opts ...grpc.CallOption) (Keeper_PutSecretClient, error)
	ListSecrets(ctx context.Context, in *ListSecretRequest, opts ...grpc.CallOption) (*ListSecretResponse, error)
}

type keeperClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperClient(cc grpc.ClientConnInterface) KeeperClient {
	return &keeperClient{cc}
}

func (c *keeperClient) GetSecretMeta(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*Meta, error) {
	out := new(Meta)
	err := c.cc.Invoke(ctx, Keeper_GetSecretMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetSecretData(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (Keeper_GetSecretDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Keeper_ServiceDesc.Streams[0], Keeper_GetSecretData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &keeperGetSecretDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Keeper_GetSecretDataClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type keeperGetSecretDataClient struct {
	grpc.ClientStream
}

func (x *keeperGetSecretDataClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keeperClient) PutSecret(ctx context.Context, opts ...grpc.CallOption) (Keeper_PutSecretClient, error) {
	stream, err := c.cc.NewStream(ctx, &Keeper_ServiceDesc.Streams[1], Keeper_PutSecret_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &keeperPutSecretClient{stream}
	return x, nil
}

type Keeper_PutSecretClient interface {
	Send(*PutSecretRequest) error
	CloseAndRecv() (*Meta, error)
	grpc.ClientStream
}

type keeperPutSecretClient struct {
	grpc.ClientStream
}

func (x *keeperPutSecretClient) Send(m *PutSecretRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *keeperPutSecretClient) CloseAndRecv() (*Meta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Meta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keeperClient) ListSecrets(ctx context.Context, in *ListSecretRequest, opts ...grpc.CallOption) (*ListSecretResponse, error) {
	out := new(ListSecretResponse)
	err := c.cc.Invoke(ctx, Keeper_ListSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeeperServer is the server API for Keeper service.
// All implementations must embed UnimplementedKeeperServer
// for forward compatibility
type KeeperServer interface {
	GetSecretMeta(context.Context, *GetSecretRequest) (*Meta, error)
	GetSecretData(*GetSecretRequest, Keeper_GetSecretDataServer) error
	PutSecret(Keeper_PutSecretServer) error
	ListSecrets(context.Context, *ListSecretRequest) (*ListSecretResponse, error)
	mustEmbedUnimplementedKeeperServer()
}

// UnimplementedKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedKeeperServer struct {
}

func (UnimplementedKeeperServer) GetSecretMeta(context.Context, *GetSecretRequest) (*Meta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretMeta not implemented")
}
func (UnimplementedKeeperServer) GetSecretData(*GetSecretRequest, Keeper_GetSecretDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSecretData not implemented")
}
func (UnimplementedKeeperServer) PutSecret(Keeper_PutSecretServer) error {
	return status.Errorf(codes.Unimplemented, "method PutSecret not implemented")
}
func (UnimplementedKeeperServer) ListSecrets(context.Context, *ListSecretRequest) (*ListSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedKeeperServer) mustEmbedUnimplementedKeeperServer() {}

// UnsafeKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServer will
// result in compilation errors.
type UnsafeKeeperServer interface {
	mustEmbedUnimplementedKeeperServer()
}

func RegisterKeeperServer(s grpc.ServiceRegistrar, srv KeeperServer) {
	s.RegisterService(&Keeper_ServiceDesc, srv)
}

func _Keeper_GetSecretMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetSecretMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetSecretMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetSecretMeta(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetSecretData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSecretRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeeperServer).GetSecretData(m, &keeperGetSecretDataServer{stream})
}

type Keeper_GetSecretDataServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type keeperGetSecretDataServer struct {
	grpc.ServerStream
}

func (x *keeperGetSecretDataServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _Keeper_PutSecret_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeeperServer).PutSecret(&keeperPutSecretServer{stream})
}

type Keeper_PutSecretServer interface {
	SendAndClose(*Meta) error
	Recv() (*PutSecretRequest, error)
	grpc.ServerStream
}

type keeperPutSecretServer struct {
	grpc.ServerStream
}

func (x *keeperPutSecretServer) SendAndClose(m *Meta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *keeperPutSecretServer) Recv() (*PutSecretRequest, error) {
	m := new(PutSecretRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Keeper_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).ListSecrets(ctx, req.(*ListSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Keeper_ServiceDesc is the grpc.ServiceDesc for Keeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.protocol.proto.Keeper",
	HandlerType: (*KeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecretMeta",
			Handler:    _Keeper_GetSecretMeta_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _Keeper_ListSecrets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSecretData",
			Handler:       _Keeper_GetSecretData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutSecret",
			Handler:       _Keeper_PutSecret_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/protocol/proto/keeper.proto",
}
